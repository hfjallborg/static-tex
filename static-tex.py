import os
import pathlib
import subprocess
import argparse
import shutil
import tempfile
from http.server import HTTPServer, SimpleHTTPRequestHandler

BASE_DIR = pathlib.Path(__file__).parent
TEX_BUILD_DIR = BASE_DIR / 'build'
TEX_SOURCE_DIR = BASE_DIR / 'source'


def build(src_dir, out_dir):
    if pathlib.Path(out_dir).exists():
        # Clean out existing folder
        shutil.rmtree(out_dir)
    os.mkdir(out_dir)

    for src_file in pathlib.Path(src_dir).glob("*.tex"):
        wd = os.getcwd()
        os.chdir(src_dir)

        # First build the files in a temporary directory.
        # (By default PlasTeX generates a directory for each .tex file, each with their own index.html,
        # by doing this we can get one output directory with each .tex file represented by their own html file.)
        with tempfile.TemporaryDirectory() as tmp_dir:
            tmp_dir_path = pathlib.Path(tmp_dir).resolve()
            p = subprocess.Popen(["plastex", "-d", tmp_dir_path, "--split-level", "-2", src_file.name])
            p.wait()
            os.chdir(wd)
            shutil.copy(tmp_dir_path / "index.html", out_dir / f"{src_file.stem}.html")
            shutil.copytree(tmp_dir_path / "styles", out_dir / "styles", dirs_exist_ok=True)
            shutil.copytree(tmp_dir_path / "js", out_dir / "js", dirs_exist_ok=True)

        # Clean up the .paux files generated by PlasTeX
        pathlib.Path(src_dir / f"{src_file.stem}.paux").unlink()


def runserver(address="", port=8000):
    server_address = (address, port)
    try:
        os.chdir(TEX_BUILD_DIR)
    except FileNotFoundError as e:
        raise FileNotFoundError("Build directory does not exist:", e)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    httpd.serve_forever()


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        prog="static-tex",
        description="Build and serve static HTML pages from TeX files."
    )
    parser.add_argument("action", choices=["build", "runserver"])
    args = parser.parse_args()

    if args.action == "build":
        build(TEX_SOURCE_DIR, TEX_BUILD_DIR)
    elif args.action == "runserver":
        runserver()
