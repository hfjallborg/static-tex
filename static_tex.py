import argparse
import os
import pathlib
import shutil
import string
import subprocess
import tempfile
import logging
from http.server import HTTPServer, SimpleHTTPRequestHandler

BASE_DIR = pathlib.Path(__file__).parent
TEX_BUILD_DIR = BASE_DIR / 'build'
TEX_SOURCE_DIR = BASE_DIR / 'source'


def build(src_dir, out_dir):
    """Compiles the .tex files in the source directory to HTML files in the build directory.

    :param src_dir: The source directory containing the .tex files.
    :type src_dir: os.PathLike
    :param out_dir: The directory to output the HTML files into.
    :type out_dir: os.PathLike
    :returns: None
    """
    src_dir, out_dir = pathlib.Path(src_dir), pathlib.Path(out_dir)
    if pathlib.Path(out_dir).exists():
        # Clean out existing folder
        shutil.rmtree(out_dir)
    os.mkdir(out_dir)

    for src_file in pathlib.Path(src_dir).glob("*.tex"):

        do_build = True
        if not _check_valid_slug(src_file.stem):
            logging.warning(f"{src_file.name} is not a valid slug, ignoring...")
            do_build = False

        wd = os.getcwd()
        os.chdir(src_dir)

        # First build the files in a temporary directory.
        # (By default PlasTeX generates a directory for each .tex file, each with their own index.html,
        # by doing this we can get one output directory with each .tex file represented by their own html file.)
        if do_build:
            with tempfile.TemporaryDirectory() as tmp_dir:
                tmp_dir_path = pathlib.Path(tmp_dir).resolve()
                p = subprocess.Popen(["plastex", "-d", tmp_dir_path, "--split-level", "-2", "--log", src_file.name])
                p.wait()
                os.chdir(wd)
                shutil.copy(tmp_dir_path / "index.html", out_dir / f"{src_file.stem}.html")
                shutil.copytree(tmp_dir_path / "styles", out_dir / "styles", dirs_exist_ok=True)
                shutil.copytree(tmp_dir_path / "js", out_dir / "js", dirs_exist_ok=True)

        # Clean up the .paux files generated by PlasTeX
        paux = pathlib.Path(src_dir / f"{src_file.stem}.paux")
        if paux.exists():
            pathlib.Path(src_dir / f"{src_file.stem}.paux").unlink()
        # Clean up log files TODO: Gather logs in separate directory
        log = pathlib.Path(src_dir / f"{src_file.stem}.log")
        if log.exists():
            pathlib.Path(src_dir / f"{src_file.stem}.log").unlink()


def _check_valid_slug(test_slug: str):
    # Checks if the inputted slug is valid (includes only allowed characters)
    allowed = set(string.ascii_lowercase + string.digits + "-")
    if set(test_slug).issubset(allowed):
        return True
    else:
        return False


class StaticTeXRequestHandler(SimpleHTTPRequestHandler):
    """Handles requests for the built-in server.

    Each outputted HTML file in the build directory will be accessible through a path representing the filename stem.
    For example, the file "index.html" could be accessed as such: 'localhost:8000/index'.

    Will return an error if the slug is invalid or if no file with that name can be found.
    """

    def do_GET(self):

        print(self.path)
        url = self.path
        # Ignore trailing slash
        if url[-1] == "/":
            url = url[:-1]

        # Find slug
        slug = url.split('/')[-1]
        if not _check_valid_slug(slug):
            # Return bad request response
            self.send_response(400, f"Invalid slug: {slug}")
            self.end_headers()
            self.wfile.write(bytes("Invalid slug", "utf-8"))
            return

        else:
            if pathlib.Path(TEX_BUILD_DIR / f"{slug}.html").exists():
                self.path = f"/{slug}.html"
                return SimpleHTTPRequestHandler.do_GET(self)
            else:
                self.send_response(404, f"Page not found.")
                self.wfile.write(bytes("Page not found.", "utf-8"))


def runserver(port=8000):
    """Starts a server that listens on the specified port."""
    server_address = ("", port)
    try:
        os.chdir(TEX_BUILD_DIR)
    except FileNotFoundError as e:
        raise FileNotFoundError("Build directory does not exist:", e)
    httpd = HTTPServer(server_address, StaticTeXRequestHandler)
    httpd.serve_forever()


if __name__ == "__main__":

    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser(
        prog="static-tex",
        description="Build and serve static HTML pages from TeX files."
    )
    parser.add_argument("action", choices=["build", "runserver"])
    parser.add_argument("-p", "--port", type=int, default=8000)
    args = parser.parse_args()

    if args.action == "build":
        build(TEX_SOURCE_DIR, TEX_BUILD_DIR)
    elif args.action == "runserver":
        runserver(port=args.port)
